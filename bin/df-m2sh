#!/usr/bin/env sbcl --script

;; Load an RC if we can find it
(let ((rc (probe-file #P"~/.sbclrc")))
  (when rc (load rc)))

;; Load up
(ql:quickload :fdog)
(use-package :fdog-m2sh)

;; Setup Env Constants
(defvar *exe* (first sb-ext:*posix-argv*))
(defvar *argv* (rest sb-ext:*posix-argv*))
(defvar *me* (make-pathname :directory `(:relative ,(car (last (pathname-directory *load-pathname*))))
                            :name (pathname-name *load-pathname*)))
(defvar *root* (merge-pathnames ".."
                                (make-pathname :directory (pathname-directory *load-pathname*))))

;; Script constants
(defvar *commands* ())

;; Command definition helpers
(defmacro defcommand (name args &body body)
  "Create a function named m2sh-cmd-`name' and add
an entry to the `*commands*' table"
  (let* ((title name)
        (prefix "m2sh-cmd-")
        (cmd-name (intern (string-upcase (concatenate 'string prefix (symbol-name title))))))

    (pushnew `(,title . ,cmd-name) *commands* :test #'(lambda (a b) (and (eql (car a) (car b))
                                                                         (eql (cdr a) (cdr b)))))
    `(defun ,cmd-name ,args
       ,@body)))

(defun get-command (name &optional (what :both))
  (let ((cmd (assoc name *commands* :test #'string-equal)))
    (and cmd
         (ecase what
           (:both cmd)
           (:name (car cmd))
           (:function (cdr cmd))))))

(defun call-command (name &rest args)
  (apply (get-command name :function) args))

(defun command-p (name)
  (get-command name))

;; Commands
(defcommand help (&optional command &rest args)
  "General help functionality. Give a command for help with a specific thing"
  (let ((cmd (get-command command)))
    (if cmd
        (format t "Help for: ~A~%" (car cmd))
      (usage :message (format nil "Unknown command: ~A" command) :exit 2))))

;; Helers
(defun usage (&key exit (message "Usage information"))
  (when message (format t "~A~%" message))
  (format t "Usage: ~A command [command-options]~%" *me*)
  (format t "Commands:~%")
  (dolist (command *commands*)
    (format t "  ~A~%" (car command)))
  (when exit (quit :unix-status exit)))

;; Aaand go
(flet ((run (root self argv)
         (unless (car argv)
           (usage :exit 1 :message "Invalid usage"))

         (destructuring-bind (command &optional args) argv
           (if (command-p command)
               (call-command command args)
             (usage :exit 1 :message (format nil "Unknown command `~A'" command))))

         (quit :unix-status 0)))
  (run *root* *me* *argv*))
